# spike.t

use strict;
use warnings;

use File::Temp qw/ tempfile /;
use Test::Base;

plan tests => 2 * blocks() + 2 * 7;

my $plfile;
my @plfiles;

mkdir 'tmp' if !-d 'tmp';

run {
    my $block = shift;
    my $gm = $block->grammar;
    my $input = $block->input;
    my $trace = $block->trace;
    my $name = $block->name;

    if (defined $gm) {
        my ($fh, $gmfile) =
            tempfile('gm_XXXXXX', SUFFIX => '.grammar', UNLINK => 1, DIR => 'tmp');
        #warn "Grammar File: $gmfile";
        print $fh $gm;
        close $fh;
        is system($^X, 'spike.pl', $gmfile), 0, "$name - spike.pl";
        ($plfile = $gmfile) =~ s/\.grammar$/.pl/;
        ok -f $plfile, "$name - $plfile ok";
    }

    my ($fh, $infile) = tempfile('in_XXXXXX', UNLINK => 1, DIR => 'tmp');
    #warn "Input File: $infile";
    print $fh $input;
    close $fh;
    ok -f $infile, "$name - $infile ok";
    my $output = `$^X $plfile $infile`;
    is $output, $trace, "$name - tracing output ok";
    push @plfiles, $plfile;
};

for my $plfile (@plfiles) {
    unlink $plfile;
}

__DATA__

=== TEST 1: Basic
--- grammar

if_stmt: 'if' <commit> cond block <uncommit> 'else' block
       | 'if' cond block

cond: 'cond'

block: /{[^}]*}/

--- input

if cond { print "a" } else { say "b" }

--- trace
  trying if_stmt...    [if cond { print...]
    trying if_stmt_production_1...
      trying 'if'...
      >>MATCH<< 'if'...
      trying cond...    [ cond { print "...]
        trying 'cond'...
        >>MATCH<< 'cond'...
      >>MATCH<< cond...
      trying block...    [ { print "a" } ...]
        trying /{[^}]*}/...
        >>MATCH<< /{[^}]*}/...
      >>MATCH<< block...
      trying 'else'...    [ else { say "b"...]
      >>MATCH<< 'else'...
      trying block...    [ { say "b" }\n]
        trying /{[^}]*}/...
        >>MATCH<< /{[^}]*}/...
      >>MATCH<< block...
    >>MATCH<< if_stmt_production_1...
  >>MATCH<< if_stmt...

success



=== TEST 2: Multi-line input
--- input

if cond {
    print "a"
} 
else { 
    say "b"
}

--- trace
  trying if_stmt...    [if cond {\n    p...]
    trying if_stmt_production_1...
      trying 'if'...
      >>MATCH<< 'if'...
      trying cond...    [ cond {\n    pri...]
        trying 'cond'...
        >>MATCH<< 'cond'...
      >>MATCH<< cond...
      trying block...    [ {\n    print "a...]
        trying /{[^}]*}/...
        >>MATCH<< /{[^}]*}/...
      >>MATCH<< block...
      trying 'else'...    [ \nelse { \n    s...]
      >>MATCH<< 'else'...
      trying block...    [ { \n    say "b"...]
        trying /{[^}]*}/...
        >>MATCH<< /{[^}]*}/...
      >>MATCH<< block...
    >>MATCH<< if_stmt_production_1...
  >>MATCH<< if_stmt...

success



=== TEST 3: Backtracking works
--- input
if cond {
    print "a"
} 
--- trace
  trying if_stmt...    [if cond {\n    p...]
    trying if_stmt_production_1...
      trying 'if'...
      >>MATCH<< 'if'...
      trying cond...    [ cond {\n    pri...]
        trying 'cond'...
        >>MATCH<< 'cond'...
      >>MATCH<< cond...
      trying block...    [ {\n    print "a...]
        trying /{[^}]*}/...
        >>MATCH<< /{[^}]*}/...
      >>MATCH<< block...
      trying 'else'...    [ \n]
      FAIL to match 'else'...
    FAIL to match if_stmt_production_1...
    trying if_stmt_production_2...    [if cond {\n    p...]
      trying 'if'...
      >>MATCH<< 'if'...
      trying cond...    [ cond {\n    pri...]
        trying 'cond'...
        >>MATCH<< 'cond'...
      >>MATCH<< cond...
      trying block...    [ {\n    print "a...]
        trying /{[^}]*}/...
        >>MATCH<< /{[^}]*}/...
      >>MATCH<< block...
    >>MATCH<< if_stmt_production_2...
  >>MATCH<< if_stmt...

success



=== TEST 4: <commit> suppresses backtracking
--- input
if cond
--- trace
  trying if_stmt...    [if cond\n]
    trying if_stmt_production_1...
      trying 'if'...
      >>MATCH<< 'if'...
      trying cond...    [ cond\n]
        trying 'cond'...
        >>MATCH<< 'cond'...
      >>MATCH<< cond...
      trying block...    [\n]
        trying /{[^}]*}/...
        FAIL to match /{[^}]*}/...
      FAIL to match block...
    FAIL to match if_stmt_production_1...

fail



=== TEST 5: Empty production
    Repetition (s) and (s /.../)
--- grammar
stmt_sequence : stmt stmt_seq
stmt_seq      : ';' stmt_sequence
              |

stmt: 's'

--- input
s;s;s
--- trace
  trying stmt_sequence...    [s;s;s\n]
    trying stmt...
      trying 's'...
      >>MATCH<< 's'...
    >>MATCH<< stmt...
    trying stmt_seq...    [;s;s\n]
      trying stmt_seq_production_1...
        trying ';'...
        >>MATCH<< ';'...
        trying stmt_sequence...    [s;s\n]
          trying stmt...
            trying 's'...
            >>MATCH<< 's'...
          >>MATCH<< stmt...
          trying stmt_seq...    [;s\n]
            trying stmt_seq_production_1...
              trying ';'...
              >>MATCH<< ';'...
              trying stmt_sequence...    [s\n]
                trying stmt...
                  trying 's'...
                  >>MATCH<< 's'...
                >>MATCH<< stmt...
                trying stmt_seq...    [\n]
                  trying stmt_seq_production_1...
                    trying ';'...
                    FAIL to match ';'...
                  FAIL to match stmt_seq_production_1...
                  trying stmt_seq_production_2...    []
                    trying ''...
                    >>MATCH<< ''...
                  >>MATCH<< stmt_seq_production_2...
                >>MATCH<< stmt_seq...
              >>MATCH<< stmt_sequence...
            >>MATCH<< stmt_seq_production_1...
          >>MATCH<< stmt_seq...
        >>MATCH<< stmt_sequence...
      >>MATCH<< stmt_seq_production_1...
    >>MATCH<< stmt_seq...
  >>MATCH<< stmt_sequence...

success



=== TEST 6: Single 's'
--- input
s
--- trace
  trying stmt_sequence...    [s\n]
    trying stmt...
      trying 's'...
      >>MATCH<< 's'...
    >>MATCH<< stmt...
    trying stmt_seq...    [\n]
      trying stmt_seq_production_1...
        trying ';'...
        FAIL to match ';'...
      FAIL to match stmt_seq_production_1...
      trying stmt_seq_production_2...    []
        trying ''...
        >>MATCH<< ''...
      >>MATCH<< stmt_seq_production_2...
    >>MATCH<< stmt_seq...
  >>MATCH<< stmt_sequence...

success



=== TEST 7: Empty input
--- input
--- trace
  trying stmt_sequence...    []
    trying stmt...
      trying 's'...
      FAIL to match 's'...
    FAIL to match stmt...
  FAIL to match stmt_sequence...

fail



=== TEST 8: Repetition (s) and (s /.../)
--- grammar

program: statement(s) eofile

eofile: /^\Z/

statement: identifier ':=' exp
         | identifier '(' exp_list ')'

identifier: /[A-Za-z_]\w*/

exp_list: exp(s /\,/)
        | ''

exp: '0' | '1'

--- input
foo := 1
bar(0,1,0)
baz()
cat(1)
--- trace
  trying program...    [foo := 1\nbar(0,...]
    trying statement...
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [ := 1\nbar(0,1,0...]
        >>MATCH<< ':='...
        trying exp...    [ 1\nbar(0,1,0)\nb...]
          trying exp_production_1...
            trying '0'...
            FAIL to match '0'...
          FAIL to match exp_production_1...
          trying exp_production_2...    [1\nbar(0,1,0)\nba...]
            trying '1'...
            >>MATCH<< '1'...
          >>MATCH<< exp_production_2...
        >>MATCH<< exp...
      >>MATCH<< statement_production_1...
    >>MATCH<< statement...
    trying statement...    [\nbar(0,1,0)\nbaz...]
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [(0,1,0)\nbaz()\nc...]
        FAIL to match ':='...
      FAIL to match statement_production_1...
      trying statement_production_2...    [\nbar(0,1,0)\nbaz...]
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying '('...    [(0,1,0)\nbaz()\nc...]
        >>MATCH<< '('...
        trying exp_list...    [0,1,0)\nbaz()\nca...]
          trying exp_list_production_1...
            trying exp...
              trying exp_production_1...
                trying '0'...
                >>MATCH<< '0'...
              >>MATCH<< exp_production_1...
            >>MATCH<< exp...
            trying /\,/...    [,1,0)\nbaz()\ncat...]
            >>MATCH<< /\,/...
            trying exp...    [1,0)\nbaz()\ncat(...]
              trying exp_production_1...
                trying '0'...
                FAIL to match '0'...
              FAIL to match exp_production_1...
              trying exp_production_2...
                trying '1'...
                >>MATCH<< '1'...
              >>MATCH<< exp_production_2...
            >>MATCH<< exp...
            trying /\,/...    [,0)\nbaz()\ncat(1...]
            >>MATCH<< /\,/...
            trying exp...    [0)\nbaz()\ncat(1)...]
              trying exp_production_1...
                trying '0'...
                >>MATCH<< '0'...
              >>MATCH<< exp_production_1...
            >>MATCH<< exp...
            trying /\,/...    [)\nbaz()\ncat(1)\n]
            FAIL to match /\,/...
          >>MATCH<< exp_list_production_1...
        >>MATCH<< exp_list...
        trying ')'...
        >>MATCH<< ')'...
      >>MATCH<< statement_production_2...
    >>MATCH<< statement...
    trying statement...    [\nbaz()\ncat(1)\n]
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [()\ncat(1)\n]
        FAIL to match ':='...
      FAIL to match statement_production_1...
      trying statement_production_2...    [\nbaz()\ncat(1)\n]
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying '('...    [()\ncat(1)\n]
        >>MATCH<< '('...
        trying exp_list...    [)\ncat(1)\n]
          trying exp_list_production_1...
            trying exp...
              trying exp_production_1...
                trying '0'...
                FAIL to match '0'...
              FAIL to match exp_production_1...
              trying exp_production_2...
                trying '1'...
                FAIL to match '1'...
              FAIL to match exp_production_2...
            FAIL to match exp_list_production_1...
            trying exp_list_production_2...
              trying ''...
              >>MATCH<< ''...
            >>MATCH<< exp_list_production_2...
          >>MATCH<< exp_list...
          trying ')'...
          >>MATCH<< ')'...
        >>MATCH<< statement_production_2...
      >>MATCH<< statement...
      trying statement...    [\ncat(1)\n]
        trying statement_production_1...
          trying identifier...
            trying /[A-Za-z_]\w*/...
            >>MATCH<< /[A-Za-z_]\w*/...
          >>MATCH<< identifier...
          trying ':='...    [(1)\n]
          FAIL to match ':='...
        FAIL to match statement_production_1...
        trying statement_production_2...    [\ncat(1)\n]
          trying identifier...
            trying /[A-Za-z_]\w*/...
            >>MATCH<< /[A-Za-z_]\w*/...
          >>MATCH<< identifier...
          trying '('...    [(1)\n]
          >>MATCH<< '('...
          trying exp_list...    [1)\n]
            trying exp_list_production_1...
              trying exp...
                trying exp_production_1...
                  trying '0'...
                  FAIL to match '0'...
                FAIL to match exp_production_1...
                trying exp_production_2...
                  trying '1'...
                  >>MATCH<< '1'...
                >>MATCH<< exp_production_2...
              >>MATCH<< exp...
              trying /\,/...    [)\n]
              FAIL to match /\,/...
            >>MATCH<< exp_list_production_1...
          >>MATCH<< exp_list...
          trying ')'...
          >>MATCH<< ')'...
        >>MATCH<< statement_production_2...
      >>MATCH<< statement...
      trying statement...    [\n]
        trying statement_production_1...
          trying identifier...
            trying /[A-Za-z_]\w*/...
            FAIL to match /[A-Za-z_]\w*/...
          FAIL to match identifier...
        FAIL to match statement_production_1...
        trying statement_production_2...    []
          trying identifier...
            trying /[A-Za-z_]\w*/...
            FAIL to match /[A-Za-z_]\w*/...
          FAIL to match identifier...
        FAIL to match statement_production_2...
        trying eofile...
          trying /^\Z/...
          >>MATCH<< /^\Z/...
        >>MATCH<< eofile...
      >>MATCH<< program...

success



=== TEST 9: Whitespace works for (s /.../)
--- input
bar( 0, 1, 0 ) baz()
cat(
--- trace
  trying program...    [bar( 0, 1, 0 ) ...]
    trying statement...
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [( 0, 1, 0 ) baz...]
        FAIL to match ':='...
      FAIL to match statement_production_1...
      trying statement_production_2...    [bar( 0, 1, 0 ) ...]
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying '('...    [( 0, 1, 0 ) baz...]
        >>MATCH<< '('...
        trying exp_list...    [ 0, 1, 0 ) baz(...]
          trying exp_list_production_1...
            trying exp...
              trying exp_production_1...
                trying '0'...
                >>MATCH<< '0'...
              >>MATCH<< exp_production_1...
            >>MATCH<< exp...
            trying /\,/...    [, 1, 0 ) baz()\n...]
            >>MATCH<< /\,/...
            trying exp...    [ 1, 0 ) baz()\nc...]
              trying exp_production_1...
                trying '0'...
                FAIL to match '0'...
              FAIL to match exp_production_1...
              trying exp_production_2...    [1, 0 ) baz()\nca...]
                trying '1'...
                >>MATCH<< '1'...
              >>MATCH<< exp_production_2...
            >>MATCH<< exp...
            trying /\,/...    [, 0 ) baz()\ncat...]
            >>MATCH<< /\,/...
            trying exp...    [ 0 ) baz()\ncat(...]
              trying exp_production_1...
                trying '0'...
                >>MATCH<< '0'...
              >>MATCH<< exp_production_1...
            >>MATCH<< exp...
            trying /\,/...    [ ) baz()\ncat(\n]
            FAIL to match /\,/...
          >>MATCH<< exp_list_production_1...
        >>MATCH<< exp_list...
        trying ')'...    [) baz()\ncat(\n]
        >>MATCH<< ')'...
      >>MATCH<< statement_production_2...
    >>MATCH<< statement...
    trying statement...    [ baz()\ncat(\n]
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [()\ncat(\n]
        FAIL to match ':='...
      FAIL to match statement_production_1...
      trying statement_production_2...    [ baz()\ncat(\n]
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying '('...    [()\ncat(\n]
        >>MATCH<< '('...
        trying exp_list...    [)\ncat(\n]
          trying exp_list_production_1...
            trying exp...
              trying exp_production_1...
                trying '0'...
                FAIL to match '0'...
              FAIL to match exp_production_1...
              trying exp_production_2...
                trying '1'...
                FAIL to match '1'...
              FAIL to match exp_production_2...
            FAIL to match exp_list_production_1...
            trying exp_list_production_2...
              trying ''...
              >>MATCH<< ''...
            >>MATCH<< exp_list_production_2...
          >>MATCH<< exp_list...
          trying ')'...
          >>MATCH<< ')'...
        >>MATCH<< statement_production_2...
      >>MATCH<< statement...
      trying statement...    [\ncat(\n]
        trying statement_production_1...
          trying identifier...
            trying /[A-Za-z_]\w*/...
            >>MATCH<< /[A-Za-z_]\w*/...
          >>MATCH<< identifier...
          trying ':='...    [(\n]
          FAIL to match ':='...
        FAIL to match statement_production_1...
        trying statement_production_2...    [\ncat(\n]
          trying identifier...
            trying /[A-Za-z_]\w*/...
            >>MATCH<< /[A-Za-z_]\w*/...
          >>MATCH<< identifier...
          trying '('...    [(\n]
          >>MATCH<< '('...
          trying exp_list...    [\n]
            trying exp_list_production_1...
              trying exp...
                trying exp_production_1...
                  trying '0'...
                  FAIL to match '0'...
                FAIL to match exp_production_1...
                trying exp_production_2...    []
                  trying '1'...
                  FAIL to match '1'...
                FAIL to match exp_production_2...
              FAIL to match exp_list_production_1...
              trying exp_list_production_2...
                trying ''...
                >>MATCH<< ''...
              >>MATCH<< exp_list_production_2...
            >>MATCH<< exp_list...
            trying ')'...
            FAIL to match ')'...
          FAIL to match statement_production_2...
          trying eofile...    [\ncat(\n]
            trying /^\Z/...
            FAIL to match /^\Z/...
          FAIL to match eofile...
        FAIL to match program...

fail



=== TEST 10: Partial parsing
--- grammar

program: statement(s)

statement: identifier ':=' exp
         | identifier '(' exp_list ')'

identifier: /[A-Za-z_]\w*/

exp_list: exp(s /\,/)
        | ''

exp: '0' | '1'

--- input
a:=1
cat(
--- trace
  trying program...    [a:=1\ncat(\n]
    trying statement...
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [:=1\ncat(\n]
        >>MATCH<< ':='...
        trying exp...    [1\ncat(\n]
          trying exp_production_1...
            trying '0'...
            FAIL to match '0'...
          FAIL to match exp_production_1...
          trying exp_production_2...
            trying '1'...
            >>MATCH<< '1'...
          >>MATCH<< exp_production_2...
        >>MATCH<< exp...
      >>MATCH<< statement_production_1...
    >>MATCH<< statement...
    trying statement...    [\ncat(\n]
      trying statement_production_1...
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying ':='...    [(\n]
        FAIL to match ':='...
      FAIL to match statement_production_1...
      trying statement_production_2...    [\ncat(\n]
        trying identifier...
          trying /[A-Za-z_]\w*/...
          >>MATCH<< /[A-Za-z_]\w*/...
        >>MATCH<< identifier...
        trying '('...    [(\n]
        >>MATCH<< '('...
        trying exp_list...    [\n]
          trying exp_list_production_1...
            trying exp...
              trying exp_production_1...
                trying '0'...
                FAIL to match '0'...
              FAIL to match exp_production_1...
              trying exp_production_2...    []
                trying '1'...
                FAIL to match '1'...
              FAIL to match exp_production_2...
            FAIL to match exp_list_production_1...
            trying exp_list_production_2...
              trying ''...
              >>MATCH<< ''...
            >>MATCH<< exp_list_production_2...
          >>MATCH<< exp_list...
          trying ')'...
          FAIL to match ')'...
        FAIL to match statement_production_2...
      >>MATCH<< program...

success



=== TEST 11: Modifier (?)
--- grammar

repetition: subrule howoften

subrule: /[A-Za-z]\w*/

howoften: '(s' regex(?) ')'

regex: /\/(?:\\\/|[^\/])*\//

--- input

statement(s /;/)

--- trace
  trying repetition...    [statement(s /;/...]
    trying subrule...
      trying /[A-Za-z]\w*/...
      >>MATCH<< /[A-Za-z]\w*/...
    >>MATCH<< subrule...
    trying howoften...    [(s /;/)\n]
      trying '(s'...
      >>MATCH<< '(s'...
      trying regex...    [ /;/)\n]
        trying //(?:\/|[^/])*//...
        >>MATCH<< //(?:\/|[^/])*//...
      >>MATCH<< regex...
      trying ')'...    [)\n]
      >>MATCH<< ')'...
    >>MATCH<< howoften...
  >>MATCH<< repetition...

success



=== TEST 12: ditto
--- input

concat(s)

--- trace
  trying repetition...    [concat(s)\n]
    trying subrule...
      trying /[A-Za-z]\w*/...
      >>MATCH<< /[A-Za-z]\w*/...
    >>MATCH<< subrule...
    trying howoften...    [(s)\n]
      trying '(s'...
      >>MATCH<< '(s'...
      trying regex...    [)\n]
        trying //(?:\/|[^/])*//...
        FAIL to match //(?:\/|[^/])*//...
      FAIL to match regex...
      trying ')'...
      >>MATCH<< ')'...
    >>MATCH<< howoften...
  >>MATCH<< repetition...

success



=== TEST 13: Modifier (s? /.../), three items
--- grammar

alternation: concat(s? /\|/)

concat: /\w+/

--- input

pig | cow | dog

--- trace
  trying alternation...    [pig | cow | dog...]
    trying concat...
      trying /\w+/...
      >>MATCH<< /\w+/...
    >>MATCH<< concat...
    trying /\|/...    [ | cow | dog\n]
    >>MATCH<< /\|/...
    trying concat...    [ cow | dog\n]
      trying /\w+/...
      >>MATCH<< /\w+/...
    >>MATCH<< concat...
    trying /\|/...    [ | dog\n]
    >>MATCH<< /\|/...
    trying concat...    [ dog\n]
      trying /\w+/...
      >>MATCH<< /\w+/...
    >>MATCH<< concat...
    trying /\|/...    [\n]
    FAIL to match /\|/...
  >>MATCH<< alternation...

success



=== TEST 14: Ditto, but single item
--- input
pig
--- trace
  trying alternation...    [pig\n]
    trying concat...
      trying /\w+/...
      >>MATCH<< /\w+/...
    >>MATCH<< concat...
    trying /\|/...    [\n]
    FAIL to match /\|/...
  >>MATCH<< alternation...

success



=== TEST 15: Ditto, but single item
--- input
pig
--- trace
  trying alternation...    [pig\n]
    trying concat...
      trying /\w+/...
      >>MATCH<< /\w+/...
    >>MATCH<< concat...
    trying /\|/...    [\n]
    FAIL to match /\|/...
  >>MATCH<< alternation...

success



=== TEST 16: Ditto, but no item
--- input
--- trace
  trying alternation...    []
    trying concat...
      trying /\w+/...
      FAIL to match /\w+/...
    FAIL to match concat...
  >>MATCH<< alternation...

success



=== TEST 17:
--- grammar

program: alternation(s)

alternation: '|'
           | concat(s? /\|/)

concat: /\w+/

--- input
pig | |
--- trace
  trying program...    [pig | |\n]
    trying alternation...
      trying alternation_production_1...
        trying '|'...
        FAIL to match '|'...
      FAIL to match alternation_production_1...
      trying alternation_production_2...
        trying concat...
          trying /\w+/...
          >>MATCH<< /\w+/...
        >>MATCH<< concat...
        trying /\|/...    [ | |\n]
        >>MATCH<< /\|/...
        trying concat...    [ |\n]
          trying /\w+/...
          FAIL to match /\w+/...
        FAIL to match concat...
      >>MATCH<< alternation_production_2...
    >>MATCH<< alternation...
    trying alternation...    [ | |\n]
      trying alternation_production_1...
        trying '|'...
        >>MATCH<< '|'...
      >>MATCH<< alternation_production_1...
    >>MATCH<< alternation...
    trying alternation...    [ |\n]
      trying alternation_production_1...
        trying '|'...
        >>MATCH<< '|'...
      >>MATCH<< alternation_production_1...
    >>MATCH<< alternation...
    trying alternation...    [\n]
      trying alternation_production_1...
        trying '|'...
        FAIL to match '|'...
      FAIL to match alternation_production_1...
      trying alternation_production_2...    []
        trying concat...
          trying /\w+/...
          FAIL to match /\w+/...
        FAIL to match concat...
      >>MATCH<< alternation_production_2...
    >>MATCH<< alternation...
    trying alternation...
      trying alternation_production_1...
        trying '|'...
        FAIL to match '|'...
      FAIL to match alternation_production_1...
      trying alternation_production_2...
        trying concat...
          trying /\w+/...
          FAIL to match /\w+/...
        FAIL to match concat...
      >>MATCH<< alternation_production_2...
    >>MATCH<< alternation...
  >>MATCH<< program...

success
